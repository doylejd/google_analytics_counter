<?php

/**
 * @file
 * Basic functions for this module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\NodeInterface;
use Drupal\google_analytics_counter\GoogleAnalyticsCounterHelper;

/**
 * Implements hook_help().
 */
function google_analytics_counter_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.google_analytics_counter':
      $output = file_get_contents(drupal_get_path('module', 'google_analytics_counter') . '/README.md');;
      return nl2br($output);
  }
}

/**
 * Implements hook_cron().
 */
function google_analytics_counter_cron() {
  $config = \Drupal::config('google_analytics_counter.settings');

  // $interval must be a value in seconds.
  $interval = 60 * $config->get('general_settings.cron_interval');

  // Important to set it before the job because if they take long
  // and there is another cron triggered...
  \Drupal::state()->set('google_analytics_counter.cron_next_execution', \Drupal::time()->getRequestTime());

  // On some systems, cron could be every minute. Throttle updating with the
  // cron_interval on the settings form.
  // To avoid this interval, set cron_interval to 0.
  if (!\Drupal::time()->getRequestTime() >= \Drupal::state()->get('system.cron_last') + $interval) {
    return;
  }

  // Proceed no further if not authenticated.
  /* @var \Drupal\google_analytics_counter\GoogleAnalyticsCounterManagerInterface $manager */
  $manager = \Drupal::service('google_analytics_counter.manager');
  if (!$manager->isAuthenticated()) {
    \Drupal::logger('google_analytics_counter')->alert('Google Analytics Counter is not authenticated or no Google Views have been added.');
    return;
  }

  // Collect pageviews on the First Google View.
  $profile_id = $config->get('general_settings.profile_id');
  if (!$profile_id) {
    return;
  }
  _google_analytics_counter_cron($profile_id);

  // Collect pageviews on the Other Google Views.
  $multiple_ids = $config->get('general_settings.$multiple_ids');
  if (!$multiple_ids) {
    return;
  }

  foreach ($multiple_ids as $multiple_id) {
    _google_analytics_counter_cron($multiple_id);
  }
}

/**
 *
 */
function _google_analytics_counter_cron($multiple_id = '') {
  $config = \Drupal::config('google_analytics_counter.settings');
  $database = \Drupal::database();

  /* @var \Drupal\google_analytics_counter\GoogleAnalyticsCounterManagerInterface $manager */
  $manager = \Drupal::service('google_analytics_counter.manager');
  $queue = \Drupal::queue('google_analytics_counter_worker');

  try {
    if (!$multiple_id) {
      // Fetch the first batch to see how many there are.
      $results = $manager->getChunkedResults();
    }
    else {
      $results = $manager->getChunkedResults($multiple_id);
    }

    // Queue the chunks.
    $total = $results->results->totalResults;
    for ($index = 0; $index < $total / $config->get('general_settings.chunk_to_fetch'); $index++) {
      // Add a queue item to fetch for all chunks.
      $queue->createItem([
        'type' => 'fetch',
        'index' => $index,
      ]);
    }

    // Select all the published nodes and create queue count items.
    $query = $database->select('node_field_data', 'nfd');
    $query->fields('nfd', ['nid', 'type', 'vid']);
    $query->condition('status', NodeInterface::PUBLISHED);
    $query->addTag('google_analytics_counter');
    $result = $query->execute();
    while ($record = $result->fetchAssoc()) {
      $queue->createItem([
        'type' => 'count',
        'nid' => $record['nid'],
        'bundle' => $record['type'],
        'vid' => $record['vid']
      ]);
    }
  }
  catch (RuntimeException $e) {
    \Drupal::logger('google_analytics_counter')
      ->alert('Cron experienced a problem: ' . $e->getMessage());
  }
}



/**
 * Implements hook_theme().
 */
function google_analytics_counter_theme() {
  return [
    'google_analytics_counter' => [
      'variables' => ['pageviews' => NULL],
    ],
  ];
}

/**
 * Implements hook_queue_info_alter().
 */
function google_analytics_counter_queue_info_alter(&$queues) {
  $config = \Drupal::config('google_analytics_counter.settings');
  $queues['google_analytics_counter_worker']['cron']['time'] = $config->get('general_settings.queue_time');
}

/**
 * Implements hook_page_attachments().
 */
function google_analytics_counter_page_attachments(&$page) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  if (in_array($theme, ['bartik', 'seven'])) {
    $page['#attached']['library'][] = 'google_analytics_counter/google_analytics_counter';
  }
}

/******************************************************************************/
// Form alter hooks
/******************************************************************************/

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form().
 */
function google_analytics_counter_form_node_form_alter(&$form, FormStateInterface $form_state) {
  // Make the google analytics counter field readonly.
  isset($form['field_google_analytics_counter']) ? $form['field_google_analytics_counter']['widget'][0]['value']['#attributes']['readonly'] = 'readonly' : NULL;

  // Display Google Analytics Counter field only to roles with the permission.
  $fields_requiring_permission = [
    'field_google_analytics_counter',
  ];
  foreach ($fields_requiring_permission as $field_requiring_permission) {
    $form[$field_requiring_permission]['#access'] = \Drupal::currentUser()->hasPermission('access content');
  }
}
