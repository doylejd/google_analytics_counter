<?php

/**
 * @file
 * Basic functions for this module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_help().
 */
function google_analytics_counter_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.google_analytics_counter':
      $output = file_get_contents(drupal_get_path('module', 'google_analytics_counter') . '/README.md');;
      return nl2br($output);
  }
}

/**
 * Implements hook_cron().
 */
function google_analytics_counter_cron() {
  $config = \Drupal::config('google_analytics_counter.settings');

  // $interval must be a value in seconds.
  $interval = 60 * $config->get('general_settings.cron_interval');

  // Important to set it before the job because if they take long
  // and there is another cron triggered...
  \Drupal::state()->set('google_analytics_counter.cron_next_execution', \Drupal::time()->getRequestTime());

  // On some systems, cron could be every minute. Throttle updating with the
  // cron_interval on the settings form.
  // To avoid this interval, set cron_interval to 0.
  if (!\Drupal::time()->getRequestTime() >= \Drupal::state()->get('system.cron_last') + $interval) {
    return;
  }

  // Convert profile_id to an array.
  $profile_id = $config->get('general_settings.profile_id');

  $profile_id = [
    $profile_id => $profile_id,
  ];

  // Combine profile_id and profile_ids.
  $profile_ids = $config->get('general_settings.profile_ids');
  $profile_ids = $profile_id + $profile_ids;

  // Query Google and get results for one or more profile_ids.
  _gac_cron_multiple_profile_ids($profile_ids);
}

/**
 * Gets results from google with one or more profile_ids.
 */
function _gac_cron_multiple_profile_ids($profile_ids) {
  $config = \Drupal::config('google_analytics_counter.settings');

  /* @var \Drupal\google_analytics_counter\GoogleAnalyticsCounterManagerInterface $manager */
  $manager = Drupal::service('google_analytics_counter.manager');
  $queue = \Drupal::queue('google_analytics_counter_worker');

  foreach ($profile_ids as $profile_id) {
    try {
      if ($manager->isAuthenticated() === TRUE) {
        // Fetch the first batch to see how many there are.
        $results = $manager->getChunkedResults($profile_id);
        $total = $results->results->totalResults;
        for ($index = 0; $index < $total / $config->get('general_settings.chunk_to_fetch'); $index++) {
          // Add a queue item to fetch for all chunks.
          $queue->createItem(['type' => 'fetch', 'index' => $index]);
        }

        // Queue all the published nodes to be counted.
        $ids = \Drupal::entityQuery('node')
          ->condition('status', NodeInterface::PUBLISHED)
          ->execute();
        foreach ($ids as $nid) {
          $queue->createItem(['type' => 'count', 'nid' => $nid]);
        }
      }
      else {
        \Drupal::logger('google_analytics_counter')
          ->alert('Google Analytics Counter is not authenticated.');
      }
    }
    catch (RuntimeException $e) {
      \Drupal::logger('google_analytics_counter')
        ->alert('Cron experienced a problem: ' . $e->getMessage());
    }
  }
}

/**
 * Implements hook_theme().
 */
function google_analytics_counter_theme() {
  return [
    'google_analytics_counter' => [
      'variables' => ['pageviews' => NULL],
    ],
  ];
}

/**
 * Implements hook_queue_info_alter().
 */
function google_analytics_counter_queue_info_alter(&$queues) {
  $config = \Drupal::config('google_analytics_counter.settings');
  $queues['google_analytics_counter_worker']['cron']['time'] = $config->get('general_settings.queue_time');
}

/**
 * Implements hook_page_attachments().
 */
function google_analytics_counter_page_attachments(&$page) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  if (in_array($theme, ['bartik', 'seven'])) {
    $page['#attached']['library'][] = 'google_analytics_counter/google_analytics_counter';
  }
}
