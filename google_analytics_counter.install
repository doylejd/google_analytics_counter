<?php

/**
 * @file
 * Update, and uninstall functions for the Google Analytics Counter module.
 */

use Drupal\Core\Config\FileStorage;
use Drupal\Core\Database\Database;
use Drupal\Core\Url;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\field\Entity\FieldConfig;
use Drupal\google_analytics_counter\GoogleAnalyticsCounterHelper;

/**
 * Implements hook_requirements().
 */
function google_analytics_counter_requirements($phase) {
  // Only check requirements during the run-time (aka Status Report).
  if ($phase != 'runtime') {
    return [];
  }

  $requirements = [];
  // Verify that the user has authenticated with Google Analytics.
  // If not, display a warning on the status page.
  $config = \Drupal::config('google_analytics_counter.settings');
  $t_args = [
    '%profile_id' => $config->get('general_settings.profile_id'),
    ':href' => Url::fromRoute('google_analytics_counter.admin_auth_form', [], ['absolute' => TRUE])
      ->toString(),
    '@href_here' => 'authentication here',
    '@href' => 'authenticate here',
  ];
  /* @var \Drupal\google_analytics_counter\GoogleAnalyticsCounterManagerInterface $manager */
  $manager = Drupal::service('google_analytics_counter.manager');

  if ($manager->isAuthenticated() === TRUE) {
    $requirements['google_analytics_counter_authentication'] = [
      'title' => t('Google Analytics Counter'),
      'description' => t('Google Analytics profile ga:%profile_id has been authenticated. You can revoke <a href=:href>@href_here</a>.', $t_args),
      'severity' => REQUIREMENT_OK,
      'value' => t('A Google Analytics profile is authenticated: OK'),
    ];
  }
  else {
    $requirements['google_analytics_counter_authentication'] = [
      'title' => t('Google Analytics Counter'),
      'description' => t('Google Analytics Counter cannot fetch any new data. Please <a href=:href>@href</a>.', $t_args),
      'severity' => REQUIREMENT_ERROR,
      'value' => t('Google Analytics have not been authenticated!'),
    ];
  }

  return $requirements;
}

/**
 * Implements hook_schema().
 *
 * See http://drupal.org/node/146939
 */
function google_analytics_counter_schema() {
  $schema['google_analytics_counter'] = array(
    'description' => 'Stores URIs and pageviews from Google Analytics.',
    'fields' => array(
      'pagepath_hash' => array(
        'type' => 'varchar',
        'length' => 32,
        'description' => 'md5 hash of the relative page path.',
        'not null' => TRUE,
      ),
      'pagepath' => array(
        'type' => 'varchar',
        // Varchar faster than text on MySQL (not creating temp table on disk);
        // see http://drupal.org/node/146939#comment-2281846
        'length' => 2048,
        // See http://stackoverflow.com/a/417184/269383
        'description' => 'Relative page path, for example "node/1" or "contact", as stored by GA.',
        'not null' => TRUE,
      ),
      'pageviews' => array(
        'type' => 'int',
        // Big int unsigned: 8 B (18446744073709551615).
        'size' => 'big',
        'description' => 'Pageview count.',
        'unsigned' => TRUE,
        'default' => 0,
        'not null' => TRUE,
      ),
      'profile_id' => array(
        'type' => 'varchar',
        'description' => "The Google profile id.",
        'length' => 20,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('pagepath_hash'),
    'indexes' => array(
      'pagepath' => array(array('pagepath', 20)),
      'pageviews' => array('pageviews'),
    ),
  );

  $schema['google_analytics_counter_storage'] = array(
    'description' => 'Stores node ids for nodes only that have pageview totals.',
    'fields' => array(
      'nid' => array(
        'description' => 'Node IDs',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'pageview_total' => array(
        'description' => 'Total pageview counts',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'profile_id' => array(
        'type' => 'varchar',
        'description' => "The Google profile id.",
        'length' => 20,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('nid'),
    'indexes' => array(
      'pageview_total' => array('pageview_total'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function google_analytics_counter_uninstall() {
  /* @var \Drupal\google_analytics_counter\GoogleAnalyticsCounterManagerInterface $manager */
  $manager = Drupal::service('google_analytics_counter.manager');

  // Revoke the state values.
  $manager->revoke();

  // Revoke the profile id state values.
  $profile_ids = GoogleAnalyticsCounterHelper::checkProfileIds();
  foreach ($profile_ids as $profile_id) {
    $manager->revokeProfiles($profile_id);
  }

  // Now delete profile_ids.
  \Drupal::state()->delete('google_analytics_counter.profile_ids');

  // Remove queued items from the database.
  GoogleAnalyticsCounterHelper::removeQueuedItems();

  // Uninstall the Google Analytics Counter field.
  $bundles = ['node'];

  $fields['field_google_analytics_counter'] = [
    'entity_type' => 'node',
  ];

  // Delete the field config.
  foreach ($bundles as $bundle) {
    foreach ($fields as $field_name => $config) {
      $field = FieldConfig::loadByName($config['entity_type'], $bundle, $field_name);
      if (!empty($field)) {
        $field->delete();
      }
    }
  }

  // Delete the field storage config.
  foreach ($fields as $field_name => $config) {
    $field_storage = FieldStorageConfig::loadByName($config['entity_type'], $field_name);
    if (!empty($field_storage)) {
      $field_storage->delete();
    }
  }
}

/**
 * Issue #2978896: Use Google developers page for Google Quotas.
 */
function google_analytics_counter_update_8002() {
  \Drupal::state()->deleteMultiple([
    'google_analytics_counter.dayquota_request',
    'google_analytics_counter.dayquota_timestamp',
    'google_analytics_counter.chunk_process_time',
    'google_analytics_counter.chunk_node_process_time',
  ]);
}

/**
 * Issue #2978896: Remove dayquota_timestamp.
 */
function google_analytics_counter_update_8003() {
  \Drupal::state()->delete('google_analytics_counter.dayquota_timestamp');
}

/**
 * Issue #3003910: Remove overwrite_statistics configuration.
 */
function google_analytics_counter_update_8004() {
  $config_factory = \Drupal::configFactory();
  $config_factory->getEditable('google_analytics_counter.settings')
    ->clear('general_settings.overwrite_statistics')
    ->save();
}

/**
 * Issue #3003875: Remove profile_id_prefill configuration.
 */
function google_analytics_counter_update_8005() {
  $config_factory = \Drupal::configFactory();
  $config_factory->getEditable('google_analytics_counter.settings')
    ->clear('general_settings.profile_id_prefill')
    ->save();
}

/**
 * Issue #3009673: Add the Google Analytics Counter field to existing installations.
 */
function google_analytics_counter_update_8006() {
  // Check if field storage exists.
  $config = FieldStorageConfig::loadByName('node', 'field_google_analytics_counter');
  if (isset($config)) {
    return NULL;
  }

  // Obtain configuration from yaml files
  $config_path = 'modules/contrib/google_analytics_counter/config/optional';
  $source      = new FileStorage($config_path);

  // Obtain the storage manager for field storage bases.
  // Create the new field configuration from the yaml configuration and save.
  \Drupal::entityTypeManager()->getStorage('field_storage_config')
    ->create($source->read('field.storage.node.field_google_analytics_counter'))
    ->save();
}

/**
 * Issue #3009673: Remove stale queued items from the database.
 */
function google_analytics_counter_update_8007() {
  GoogleAnalyticsCounterHelper::removeQueuedItems();
}

/**
 * Issue #3003875: Remove states which will be replaced by states with profile_ids.
 */
function google_analytics_counter_update_8008() {
  $gac_states = [
    'google_analytics_counter.data_step',
    'google_analytics_counter.most_recent_query',
    'google_analytics_counter.total_pageviews',
    'google_analytics_counter.total_paths',
  ];

  foreach ($gac_states as $gac_state) {
    \Drupal::state()->delete($gac_state);
  }
}

/**
 * Issue #3003875: Add the profile id to the storage tables.
 */
function google_analytics_counter_update_8009() {
  $schema = Database::getConnection()->schema();
  if ($schema->fieldExists('google_analytics_counter', 'profile_id')) {
    return;
  }
  $google_analytics_counter = [
    'type' => 'varchar',
    'description' => "The Google profile id.",
    'length' => 20,
    'not null' => FALSE,
  ];
  $schema->addField('google_analytics_counter', 'profile_id', $google_analytics_counter);

  if ($schema->fieldExists('google_analytics_counter_storage', 'profile_id')) {
    return;
  }
  $google_analytics_counter_storage = [
    'type' => 'varchar',
    'description' => "The Google profile id.",
    'length' => 20,
    'not null' => FALSE,
  ];
  $schema->addField('google_analytics_counter_storage', 'profile_id', $google_analytics_counter_storage);
}