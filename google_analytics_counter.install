<?php

/**
 * @file
 * Update, and uninstall functions for the Google Analytics Counter module.
 */

use Drupal\Core\Config\FileStorage;
use Drupal\Core\Database\Database;
use Drupal\Core\Url;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\field\Entity\FieldConfig;
use Drupal\google_analytics_counter\GoogleAnalyticsCounterHelper;
use Drupal\google_analytics_counter\GoogleAnalyticsCounterCustomFieldGenerator;

/**
 * Implements hook_requirements().
 */
function google_analytics_counter_requirements($phase) {
  // Only check requirements during the run-time (aka Status Report).
  if ($phase != 'runtime') {
    return [];
  }

  $requirements = [];
  // Verify that the user has authenticated with Google Analytics.
  // If not, display a warning on the status page.
  $t_args = [
    ':href' => Url::fromRoute('google_analytics_counter.admin_auth_form', [], ['absolute' => TRUE])
      ->toString(),
    '@href' => 'authentication form',
  ];
  /* @var \Drupal\google_analytics_counter\GoogleAnalyticsCounterAuthManagerInterface $auth_manager */
  $auth_manager = Drupal::service('google_analytics_counter.auth_manager');

  if ($auth_manager->isAuthenticated() === TRUE) {
    $requirements['google_analytics_counter_authentication'] = [
      'title' => t('Google Analytics Counter'),
      'description' => t('You can revoke authentication on the <a href=:href>@href</a>.', $t_args),
      'severity' => REQUIREMENT_OK,
      'value' => t('Google Analytics have been authenticated.'),
    ];
  }
  else {
    $requirements['google_analytics_counter_authentication'] = [
      'title' => t('Google Analytics Counter'),
      'description' => t('Authenticate with Google on the <a href=:href>@href</a>.', $t_args),
      'severity' => REQUIREMENT_ERROR,
      'value' => t('Google Analytics have not been authenticated.'),
    ];
  }

  return $requirements;
}

/**
 * Implements hook_schema().
 */
function google_analytics_counter_schema() {
  $schema['google_analytics_counter'] = [
    'description' => 'Stores URIs and pageviews from Google Analytics.',
    'fields' => [
      'pagepath_hash' => [
        'type' => 'varchar',
        'length' => 32,
        'description' => 'md5 hash of the relative page path.',
        'not null' => TRUE,
      ],
      'pagepath' => [
        'type' => 'varchar',
        'length' => 2048,
        'description' => 'Relative page path, for example "node/1" or "contact", as stored by GA.',
        'not null' => TRUE,
      ],
      'pageviews' => [
        'type' => 'int',
        'size' => 'big',
        'description' => 'Pageview count.',
        'unsigned' => TRUE,
        'default' => 0,
        'not null' => TRUE,
      ],
      'date_range' => [
        'type' => 'varchar',
        'length' => '2048',
        'description' => 'Date Range for this result. This allows multiple date range to be stored for each node.',
        'not null' => TRUE,
      ],
    ],
    'primary key' => ['pagepath_hash'],
    'indexes' => [
      'pagepath' => [['pagepath', 20]],
      'pageviews' => ['pageviews'],
    ],
  ];

  $schema['google_analytics_counter_storage'] = [
    'description' => 'Stores node ids for nodes only that have pageview totals.',
    'fields' => [
      'node_hash' => [
        'type' => 'varchar',
        'length' => 32,
        'description' => 'md5 hash of the node and date.',
        'not null' => TRUE,
      ],
      'nid' => [
        'description' => 'Node IDs',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'pageview_total' => [
        'description' => 'Total pageview counts',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'date_range' => [
        'type' => 'varchar',
        'length' => '2048',
        'description' => 'Date Range for this result. This allows multiple date range to be stored for each node.',
        'not null' => TRUE,
      ],
    ],
    'indexes' => [
      'nid' => ['nid'],
      'pageview_total' => ['pageview_total'],
      'date_range' => ['date_range'],
    ],
  ];

  return $schema;
}

/**
 * Implements hook_install().
 */
function google_analytics_counter_install() {
  GoogleAnalyticsCounterHelper::gacSaveTypeConfig();
}

/**
 * Implements hook_uninstall().
 */
function google_analytics_counter_uninstall() {

  // Revoke the state values.
  GoogleAnalyticsCounterHelper::gacDeleteState();

  // Remove queued items from the database.
  GoogleAnalyticsCounterHelper::gacRemoveQueuedItems();

  google_analytics_counter_remove_legacy_field();
}


function google_analytics_counter_remove_legacy_field() {
  // Uninstall the Google Analytics Counter field.
  $bundles = ['node'];

  $fields['field_google_analytics_counter'] = [
    'entity_type' => 'node',
  ];

  // Delete the field config.
  foreach ($bundles as $bundle) {
    foreach ($fields as $field_name => $config) {
      $field = FieldConfig::loadByName($config['entity_type'], $bundle, $field_name);
      if (!empty($field)) {
        $field->delete();
      }
    }
  }

  // Delete the field storage config.
  foreach ($fields as $field_name => $config) {
    $field_storage = FieldStorageConfig::loadByName($config['entity_type'], $field_name);
    if (!empty($field_storage)) {
      $field_storage->delete();
    }
  }
}

/**
 * Issue #2978896: Use Google developers page for Google Quotas.
 */
function google_analytics_counter_update_8002() {
  \Drupal::state()->deleteMultiple([
    'google_analytics_counter.dayquota_request',
    'google_analytics_counter.dayquota_timestamp',
    'google_analytics_counter.chunk_process_time',
    'google_analytics_counter.chunk_node_process_time',
  ]);
}

/**
 * Issue #2978896: Remove dayquota_timestamp.
 */
function google_analytics_counter_update_8003() {
  \Drupal::state()->delete('google_analytics_counter.dayquota_timestamp');
}

/**
 * Issue #3003910: Remove overwrite_statistics configuration.
 */
function google_analytics_counter_update_8004() {
  $config_factory = \Drupal::configFactory();
  $config_factory->getEditable('google_analytics_counter.settings')
    ->clear('general_settings.overwrite_statistics')
    ->save();
}

/**
 * Issue #3003875: Remove profile_id_prefill configuration.
 */
function google_analytics_counter_update_8005() {
  $config_factory = \Drupal::configFactory();
  $config_factory->getEditable('google_analytics_counter.settings')
    ->clear('general_settings.profile_id_prefill')
    ->save();
}

/**
 * Issue #3009673: Add the Google Analytics Counter field to existing installations.
 */
function google_analytics_counter_update_8006() {
  // Check if field storage exists.
  $config = FieldStorageConfig::loadByName('node', 'field_google_analytics_counter');
  if (isset($config)) {
    return NULL;
  }

  // Obtain configuration from yaml files.
  $config_path = 'modules/contrib/google_analytics_counter/config/optional';
  $source      = new FileStorage($config_path);

  // Obtain the storage manager for field storage bases.
  // Create the new field configuration from the yaml configuration and save.
  \Drupal::entityTypeManager()->getStorage('field_storage_config')
    ->create($source->read('field.storage.node.field_google_analytics_counter'))
    ->save();
}

/**
 * Issue #3009673: Remove stale queued items from the database.
 */
function google_analytics_counter_update_8007() {
  GoogleAnalyticsCounterHelper::gacRemoveQueuedItems();
}

/**
 * Issue #3020811: Move Configure types form into its own tab.
 */
function google_analytics_counter_update_8008() {
  GoogleAnalyticsCounterHelper::gacSaveTypeConfig();
}

/**
 * Issue #000000: Module upgrades to allow for multiple date ranges:
 * - Adds date_range fields to google_analytics_counter and google_analytics_counter_storage modules.
 * - Remove the legacy field of field_google_analytics_counter to prepare for new values.
 * - TODO: What do we do with the date ranges? Do we ignore custom date ranges for now?
 * - Loop through content types and add new fields based on date_range config.
 */
function google_analytics_counter_update_8009() {
  // Drop data from the google_analytics_counter and google_analytics_counter_storage tables
  \Drupal::database()
    ->query("DELETE FROM {google_analytics_counter} WHERE pageviews >= 0 LIMIT 400000");
  \Drupal::database()
    ->query("DELETE FROM {google_analytics_counter_storage} WHERE pageview_total >= 0 LIMIT 400000");

  // Remove queued items from the database.
  GoogleAnalyticsCounterHelper::gacRemoveQueuedItems();

  // Remove the legacy field_google_analytics_counter from all nodes:
  google_analytics_counter_remove_legacy_field();

  // Add date_range column to the google_analytics_counter and google_analytics_counter_storage custom tables.
  $schema = Database::getConnection()->schema();

  // Add the dae_range to the google_analytics_counter table.
  if (!$schema->fieldExists('google_analytics_counter', 'date_range')) {
    $spec = [
      'type' => 'varchar',
      'length' => '2048',
      'description' => 'Date Range for this result. This allows multiple date range to be stored for each alias.',
      'not null' => TRUE,
    ];
    $schema->addField('google_analytics_counter', 'date_range', $spec);
  }

  // Add the dae_range to the google_analytics_counter table.
  if (!$schema->fieldExists('google_analytics_counter_storage', 'date_range')) {
    $spec = [
      'type' => 'varchar',
      'length' => '2048',
      'description' => 'Date Range for this result. This allows multiple date range to be stored for each node.',
      'not null' => TRUE,
    ];
    $schema->addField('google_analytics_counter_storage', 'date_range', $spec);
  }

  // Add the dae_range to the google_analytics_counter table.
  if (!$schema->fieldExists('google_analytics_counter_storage', 'node_hash')) {
    $spec = [
      'type' => 'varchar',
      'length' => 32,
      'description' => 'md5 hash of the node and date.',
      'not null' => TRUE,
    ];
    $schema->addField('google_analytics_counter_storage', 'node_hash', $spec);
  }



  // Update date range settings to proper format.
  // Load start_date, check if its already a json_encoded. If not, json encode it.
  $config_factory = \Drupal::configFactory();
  $settings_config = $config_factory->getEditable('google_analytics_counter.settings');
  $start_date = json_decode($settings_config->get('general_settings.start_date'));
  if (json_last_error() != JSON_ERROR_NONE) {
    $start_date = $settings_config->get('general_settings.start_date');
    $date_range = json_encode([$start_date => $start_date]);
    $settings_config->set('general_settings.start_date', $date_range);
    $start_date = json_decode($date_range);
  }

  // Create new fields for configured date range.
  // TODO: Check edge case for custom configured time series.
  $content_types = \Drupal::service('entity.manager')->getStorage('node_type')->loadMultiple();
  $custom_field = $date = \Drupal::service('google_analytics_counter.custom_field_generator');
  // Loop through all date ranges currently enabled to re-evaluate fields.
  foreach($start_date as $date => $date_value){
    foreach ($content_types as $machine_name => $content_type) {
      $content_type_settings = $settings_config->get("general_settings.gac_type_$machine_name");
      $key = "gac_type_$machine_name";
      // Get the NodeTypeInterface $type from gac_type_{content_type}.
      $type = \Drupal::service('entity.manager')
        ->getStorage('node_type')
        ->load(substr($key, 9));

      // Add the field if the field has been checked.
      if ($content_type_settings == 1) {
        $custom_field->gacPreAddField($type, $key, 1, $date);
      }

    }
  }




}
